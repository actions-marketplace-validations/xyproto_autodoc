name: Go package

on: [push]

jobs:
  setup-ollama:
    runs-on: ubuntu-latest
    steps:
      - name: Cache the ollama executable and models after these steps completes
        id: cache-ollama
        uses: actions/cache@v3
        with:
          path: |
            ollama
            .ollama
          key: ${{ runner.os }}-ollama

      - name: Checkout code
        if: steps.cache-ollama.outputs.cache-hit != 'true'
        uses: actions/checkout@v4

      - name: Setup Go
        if: steps.cache-ollama.outputs.cache-hit != 'true'
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build Ollama
        if: steps.cache-ollama.outputs.cache-hit != 'true'
        run: |
          git clone --recursive https://github.com/jmorganca/ollama && cd ollama && go generate ./... && go build -v

      - name: Test the ollama executable
        run: ollama/ollama --help

      - name: Run ollama in the background
        run: ollama/ollama serve &

      - name: Pull the model
        run: ollama/ollama pull ${{ matrix.model }}

  run-model:
    needs: setup-ollama
    runs-on: ubuntu-latest
    strategy:
      matrix:
        model:
          - 'codeup:latest'
          #- 'llama2:chat'
          #- 'llama2:text'
          #- 'mistral:7b-text'
          #- 'mistral:7b-instruct'
          #- 'wizardlm-uncensored:13b'
          #- 'codeup:13b-llama2-chat'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache the ollama executable and models after these steps completes
        id: cache-ollama
        uses: actions/cache@v3
        with:
          path: |
            ollama
            .ollama
          key: ${{ runner.os }}-ollama

      - name: Set execute permissions for ollama
        run: chmod +x ollama/ollama

      - name: Run ollama in the background
        run: ollama/ollama serve &

      - name: Pull the model
        run: ollama/ollama pull ${{ matrix.model }}

      - name: Generate a Modelfile
        run: |
          echo "FROM ${{ matrix.model }}" > Modelfile
          echo "PARAMETER temperature 0.1" >> Modelfile
          #echo "EMBED main.go" >> Modelfile
          echo "SYSTEM \"\"\"" >> Modelfile
          #cat main.go >> Modelfile
          cat prompt.txt >> Modelfile
          echo "\"\"\"" >> Modelfile

      - name: Cat the Modelfile
        run: cat Modelfile

      - name: Pull and build the model
        run: |
          MODEL_NAME=$(echo "${{ matrix.model }}_custom" | tr ':-' '__')
          ollama/ollama create "${MODEL_NAME}" -f Modelfile

      - name: Generate API documentation
        run: |
          MODEL_NAME=$(echo "${{ matrix.model }}_custom" | tr ':-' '__')
          ollama/ollama run "${MODEL_NAME}" > "${MODEL_NAME}.md"

      - name: Cat the Markdown document
        run: |
          MODEL_NAME=$(echo "${{ matrix.model }}_custom" | tr ':-' '__')
          cat "${MODEL_NAME}.md"

      - name: Commit and push the API documentation
        run: |
          MODEL_NAME=$(echo "${{ matrix.model }}_custom" | tr ':-' '__')
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add "${MODEL_NAME}.md" || true
          git commit -m "Add result files from GitHub Actions"
          git log -1 --pretty=%B | grep -q "Update API documentation" || git commit -m "Update API documentation" && git push || true
